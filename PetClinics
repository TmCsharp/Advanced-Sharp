using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        List<Pet> pets = new List<Pet>();
        List<Clinic> clinics = new List<Clinic>();

        int count = int.Parse(Console.ReadLine());

        for(int i=0; i<count; i++)
        {
            var tokens = Console.ReadLine().Split();
            Clinic clinic;

            switch (tokens[0])
            {
                case "Create":
                    switch (tokens[1])
                    {
                        case "Pet":
                            pets.Add(new Pet(tokens[2], int.Parse(tokens[3]), tokens[4]));
                            break;
                        case "Clinic":
                            try
                            {
                                clinics.Add(new Clinic(tokens[2], int.Parse(tokens[3])));
                            }
                            catch(InvalidOperationException ioe)
                            {
                                Console.WriteLine(ioe.Message);
                            }
                            break;
                    }
                    break;
                case "Add":
                    var pet = pets.SingleOrDefault(p => p.Name == tokens[1]);
                    clinic = clinics.Single(c => c.Name == tokens[2]);

                    try
                    {
                        Console.WriteLine(clinic.AddPet(pet));
                    }
                    catch(InvalidCastException ioe)
                    {
                        Console.WriteLine(ioe.Message);
                    }
                    break;
                case "Release":
                    clinic = clinics.Single(c => c.Name == tokens[1]);
                    Console.WriteLine(clinic.Release());
                    break;
                case "HasEmptyRooms":
                    clinic = clinics.Single(c => c.Name == tokens[1]);
                    Console.WriteLine(clinic.HasEmptyRooms());
                    break;
                case "Print":
                    clinic = clinics.Single(c => c.Name == tokens[1]);

                    if (tokens.Length == 2)
                    {
                        clinic.Print();
                    }
                    else if(tokens.Length == 3)
                    {
                        clinic.PrintRoom(int.Parse(tokens[2]));
                    }
                    break;
            }
        }
    }
}


﻿using System;
using System.Collections.Generic;
using System.Text;

public class Pet
{
    public Pet(string name, int age, string kind)
    {
        this.Name = name;
        this.Age = age;
        this.Kind = kind;
    }

    public string Name { get; private set; }

    public int Age { get; private set; }

    public string Kind { get; private set; }

    public override string ToString()
    {
        return $"{Name} {Age} {Kind}";
    }
}


﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class Clinic
{
    private Pet[] rooms;
    private int addIndex;
    private int releaseIndex;

    public Clinic(string name, int rooms)
    {
        if(rooms % 2 == 0)
        {
            throw new InvalidOperationException("Invalid Operation!");
        }

        this.rooms = new Pet[rooms];
        this.Name = name;
        this.addIndex = rooms / 2;
        this.releaseIndex = rooms / 2;
    }

    public string Name { get; private set; }

    public bool AddPet(Pet pet)
    {
        if(pet == null)
        {
            throw new InvalidOperationException("Invalid Operation!");
        }

        for(int diff = 0; diff <= addIndex; diff++)
        {
            if(rooms[addIndex - diff] == null)
            {
                rooms[addIndex - diff] = pet;
                return true;
            }

            if (rooms[addIndex + diff] == null)
            {
                rooms[addIndex + diff] = pet;
                return true;
            }
        }

        return false;
    }

    public bool Release()
    {
        for(int i = releaseIndex; i<rooms.Length; i++)
        {
            if(rooms[i] != null)
            {
                rooms[i] = null;
                return true;
            }
        }

        for (int i = 0; i < releaseIndex; i++)
        {
            if (rooms[i] != null)
            {
                rooms[i] = null;
                return true;
            }
        }

        return false;
    }

    public bool HasEmptyRooms()
    {
        return this.rooms.Any(r => r == null);
    }

    public void PrintRoom(int number)
    {
        if(rooms[number - 1] != null)
        {
            Console.WriteLine(rooms[number - 1]);
        }
        else
        {
            Console.WriteLine("Room empty");
        }
    }

    public void Print()
    {
        foreach(var pet in rooms)
        {
            if(pet == null)
            {
                Console.WriteLine("Room empty");
            }
            else
            {
                Console.WriteLine(pet);
            }
        }
    }
}
