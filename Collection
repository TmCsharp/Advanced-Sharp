using System;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        ListyIterator<string> listyIterator = null;

        string command;

        while((command = Console.ReadLine()) != "END")
        {
            var tokens = command.Split();

            switch (tokens[0])
            {
                case "Create":
                    listyIterator = new ListyIterator<string>(tokens.Skip(1).ToArray());
                    break;
                case "Move":
                    Console.WriteLine(listyIterator.Move());
                    break;
                case "Print":
                    try
                    {
                        listyIterator.Print();
                    }
                    catch(InvalidOperationException ioe)
                    {
                        Console.WriteLine(ioe.Message);
                    }
                    break;
                case "HasNext":
                    Console.WriteLine(listyIterator.HasNext());
                    break;
                case "PrintAll":
                    foreach (var item in listyIterator)
                    {
                        Console.Write(item + " ");
                    }
                    Console.WriteLine();
                    break;
            }
        }
    }
}



﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

public class ListyIterator<T> : IEnumerable<T>
{
    private List<T> elements;
    int currentIndex;

    public ListyIterator(params T[] elements)
    {
        this.elements = new List<T>(elements);
    }

    public bool Move()
    {
        if(currentIndex < elements.Count - 1)
        {
            currentIndex++;
            return true;
        }

        return false;
    }

    public bool HasNext()
    {
        return currentIndex + 1 < elements.Count;
    }

    public void Print()
    {
        if(elements.Count == 0)
        {
            throw new InvalidOperationException("Invalid Operation!");
        }

        Console.WriteLine(elements[currentIndex]);
    }

    public IEnumerator<T> GetEnumerator()
    {
        foreach (T item in elements)
        {
            yield return item;
        }
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return this.GetEnumerator();
    }
}
