
using CustomLinkedList;

SoftuniLinkedList linkedList = new SoftuniLinkedList();

linkedList.AddLast(1);
linkedList.AddLast(2);
linkedList.AddLast(3);
linkedList.AddLast(4);

linkedList.AddFirst(51);

//linkedList.RemoveFirst();
//linkedList.RemoveLast();

int[] arr = linkedList.ToArray();

Console.WriteLine(String.Join(",",arr));

linkedList.ForEach(x =>
{
    Console.WriteLine($"Node: {x}");
});

Console.WriteLine("Reversed");

linkedList.ForEachReversed(x =>
{
    Console.WriteLine($"Node: {x}");
});

//Node node = linkedList.Head;

//while (node != null)
//{
//    Console.WriteLine(node.Value);
//    node = node.Next;
//}

//Node head = new Node(1);

//head.Next = new Node(2);

//head.Next.Next = head;

//head.Next.Next.Next.Next.Next.Next.Next.Next.Next = new Node(3); 

//node = head;

//while (node != null)
//{
//    Console.WriteLine(node.Value);
//    node= node.Next;   
//}





using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CustomLinkedList
{
    public class Node
    {
        public Node(int value, Node next = null, Node previous = null)
        {
            Value = value;
            Previous = previous;
            Next = next;
        }

        public int Value { get; set; }

        public Node Next { get; set; }

        public Node Previous { get; set; }

        public override string ToString()
        {
            return $"{Previous?.Value} <- {Value} -> {Next?.Value}"; 
        }
    }
}
