using System;
using System.Collections.Generic;

namespace CarSalesman;

public class StartUp
{
    static void Main(string[] args)
    {
        List<Car> cars = new();
        List<Engine> engines = new();

        int countEngines = int.Parse(Console.ReadLine());

        for (int i = 0; i < countEngines; i++)
        {
            string[] engineProperties = Console.ReadLine().Split(" ", StringSplitOptions.RemoveEmptyEntries);

            Engine engine = CreateEngine(engineProperties);

            engines.Add(engine);
        }

        int countCars = int.Parse(Console.ReadLine());

        for (int i = 0; i < countCars; i++)
        {
            string[] carProperties = Console.ReadLine().Split(" ", StringSplitOptions.RemoveEmptyEntries);

            Car car = CreateCar(carProperties, engines);

            cars.Add(car);
        }

        foreach (var car in cars)
        {
            Console.WriteLine(car.ToString());
        }
    }

    static Engine CreateEngine(string[] enginePropeties)
    {
        Engine engine = new(enginePropeties[0], int.Parse(enginePropeties[1]));

        if (enginePropeties.Length > 2)
        {
            int displacement;

            bool isDigit = int.TryParse(enginePropeties[2], out displacement);

            if (isDigit)
            {
                engine.Displacement = displacement;
            }
            else
            {
                engine.Efficiency = enginePropeties[2];
            }

            if (enginePropeties.Length > 3)
            {
                engine.Efficiency = enginePropeties[3];
            }
        }

        return engine;
    }

    static Car CreateCar(string[] carPropeties, List<Engine> engines)
    {
        Engine engine = engines.Find(x => x.Model == carPropeties[1]);

        Car car = new(carPropeties[0], engine);

        if (carPropeties.Length > 2)
        {
            int weight;

            bool isDigit = int.TryParse(carPropeties[2], out weight);

            if (isDigit)
            {
                car.Weight = weight;
            }
            else
            {
                car.Color = carPropeties[2];
            }

            if (carPropeties.Length > 3)
            {
                car.Color = carPropeties[3];
            }
        }

        return car;
    }
}


﻿using System;

namespace CarSalesman;

public class Car
{
    public Car(string model, Engine engine)
    {
        Model = model;
        Engine = engine;
    }

    public string Model { get; set; }
    public Engine Engine { get; set; }
    public int Weight { get; set; }
    public string Color { get; set; }

    public override string ToString()
    {
        string weight = Weight == 0 ? "n/a" : Weight.ToString(); // if Weight equals 0 - default value, then string takes value "n/a" else takes string value of Weight for example "1300"
        string color = Color ?? "n/a"; // if Color is null then string takes value "n/a" else it takes Color value for example "Silver"

        string result =
            $"{Model}:{Environment.NewLine}" +
            $"  {Engine.ToString()}{Environment.NewLine}" +
            $"  Weight: {weight}{Environment.NewLine}" +
            $"  Color: {color}";

        return result;
    }
}



﻿using System;

namespace CarSalesman;

public class Engine
{
    public Engine(string model, int power)
    {
        Model = model;
        Power = power;
    }

    public string Model { get; set; }
    public int Power { get; set; }
    public int Displacement { get; set; }
    public string Efficiency { get; set; }

    public override string ToString()
    {
        string displacement = Displacement == 0 ? "n/a" : Displacement.ToString();
        string efficiency = Efficiency ?? "n/a";

        string result =
            $"{Model}:{Environment.NewLine}" +
            $"    Power: {Power}{Environment.NewLine}" +
            $"    Displacement: {displacement}{Environment.NewLine}" +
            $"    Efficiency: {efficiency}";

        return result;
    }
}
