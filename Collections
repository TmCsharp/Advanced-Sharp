using Collection;
using System;
using System.Collections.Generic;
using System.Linq;


List<string> items = Console.ReadLine()
    .Split(" ", StringSplitOptions.RemoveEmptyEntries)
    .Skip(1)
    .ToList();

ListyIterator<string> listyIterator = new(items);

string command = string.Empty;

while ((command = Console.ReadLine()) != "END")
{
    switch (command)
    {
        case "Move":
            Console.WriteLine(listyIterator.Move());
            break;
        case "HasNext":
            Console.WriteLine(listyIterator.HasNext());
            break;
        case "Print":
            try
            {
                listyIterator.Print();
            }
            catch (InvalidOperationException exception)
            {
                Console.WriteLine(exception.Message);
            }

            break;
        case "PrintAll":
            foreach (var item in listyIterator)
            {
                Console.Write($"{item} ");
            }

            Console.WriteLine();
            break;
    }
}




﻿using System;
using System.Collections;
using System.Collections.Generic;

namespace Collection;

public class ListyIterator<T> : IEnumerable<T>
{
    private int index;
    private List<T> items;

    public ListyIterator(List<T> items)
    {
        this.items = items;
    }

    public bool Move()
    {
        if (index < items.Count - 1)
        {
            index++;

            return true;
        }

        return false;
    }

    public bool HasNext()
    {
        return index < items.Count - 1;
    }

    public void Print()
    {
        if (items.Count == 0)
        {
            throw new InvalidOperationException("Invalid Operation!");
        }

        Console.WriteLine(items[index]);
    }

    public IEnumerator<T> GetEnumerator()
    {
        foreach (var item in items)
        {
            yield return item;
        }
    }

    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
}
