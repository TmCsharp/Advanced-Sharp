
namespace GenericScale
{
    public class EqualityScale<T> where T : IComparable<T>
    {
        private T left;
        private T right;

        public EqualityScale(T left, T right)
        {
            this.left = left;
            this.right = right;
        }
        public T Left
        {
            get { return left; }
            set { left = value; }
        }
        public T Right
        {
            get { return right; }
            set { right = value; }
        }
        public bool AreEqual()
        {
            return left.Equals(right);
        }

        public T GetBigger()
        {
            if (left.CompareTo(right) > 0 )
            {
                return left;
            }
            else
            {
                return right;
            }
        }
    }
}




namespace GenericScale
{
    public class StartUp
    {
        public static void Main(string[] args)
        {
            EqualityScale<int> scale = new EqualityScale<int>(55,5);
            Console.WriteLine(scale.AreEqual());
            Console.WriteLine(scale.GetBigger());
        }
    }
}
