using System;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        Stack<int> stack = new Stack<int>();

        string command;

        while((command = Console.ReadLine()) != "END")
        {
            var tokens = command.Split(" ", StringSplitOptions.RemoveEmptyEntries);

            switch (tokens[0])
            {
                case "Push":
                    int[] elements = tokens.Skip(1)
                        .Select(i => i.Split(',').First())
                        .Select(int.Parse)
                        .ToArray();
                    stack.Push(elements);
                    break;
                case "Pop":
                    try
                    {
                        stack.Pop();
                    }
                    catch(InvalidOperationException ioe)
                    {
                        Console.WriteLine(ioe.Message);
                    }
                    break;
            }
        }

        foreach(var item in stack)
        {
            Console.WriteLine(item);
        }

        foreach (var item in stack)
        {
            Console.WriteLine(item);
        }
    }
}



﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

class Stack<T> : IEnumerable<T>
{
    private List<T> elements;
    private int currentIndex = -1;

    public Stack()
    {
        this.elements = new List<T>();
    }

    public void Push(params T[] items)
    {
        foreach(var item in items)
        {
            elements.Insert(++currentIndex, item);
        }
    }

    public void Pop()
    {
        if(currentIndex < 0)
        {
            throw new InvalidOperationException("No elements");
        }

        currentIndex--;
    }

    public IEnumerator<T> GetEnumerator()
    {
        for(int i= currentIndex; i >= 0; i--)
        {
            yield return elements[i];
        }
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return this.GetEnumerator();
    }
}
